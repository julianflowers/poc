---
title: "flu"
format: 
    html:
        toc: true
        toc-location: right
        fig-width: 8
        fig-height: 6
    docx: 
        fig-width: 8
        fig-height: 6
    pdf: 
       fig-width: 8
       fig-height: 6
editor: visual
execute: 
  warning: false
  message: false
  cache: false
---

Injury

```{r}
#| label: setup
#| include: false

needs(data.table, tidyverse)

pops <- fread("/Users/julianflowers/Library/CloudStorage/GoogleDrive-julian.flowers12@gmail.com/My Drive/Saudi/data/pop_ests.csv")

flu <- fread("/Users/julianflowers/spha/data/fwdatastrategypocpublichealthframeworkindicators/Flu Vaccine Coverage 2023 updated.csv")

theme_set(ggthemes::theme_base() + theme(text = element_text(size = 9), panel.background = element_blank()))

```

```{r}
#| label: clean data

flu$region_en |> unique()

flu[, .N, by = .(Gender, AgeAtAdministration, region_en)]

length(flu$region_en |> unique())
length(flu$AgeAtAdministration |> unique())

max(flu$AgeAtAdministration)



```


```{r}
#| label: recode region names to enable linkage to population data

flu_reg_names <- pluck(flu, "region_en") |> unique()
pops_reg_names <- pluck(pops, "Region") |> unique()

intersect(flu_reg_names, pops_reg_names)
## only 4 names are identical between datasets
## will need to recode region names in flu dataset to pop data names
## also add new variable `region` to facilitate linkage between datasets

flu <- flu[, region := recode(region_en, "Riyadh" = "Ar Riyadh", 
                                  "Al Baha" = "Al Bahah", 
                                  "Sharqiya"  = "Al Mintaqah ash Sharqiyah",
                                  "Makkah Al Mukarramah" = "Makkah al Mukarramah",
                                  "Al Qassim" = "Al Qasim",
                                  "Hail" = "Ha'il",
                                  "madina" = "Al Madinah al Munawwarah",
                                  "Asir" = "'Asir", 
                                  "Northern Frontier" = "Al Hudud ash Shamaliyah")]


## check names match
intersect(unique(flu$region), pops_reg_names)

```


```{r}
#| label: estimate ages and create age bands

labels <- unique(pops$`Five-Year Age Group`)

#cut(flu$AgeAtAdministration, breaks = seq(0, max(flu$AgeAtAdministration), 5))
##  first create a terminal age band 80+ to match population data
## 
flu <- flu[!is.na(AgeAtAdministration), age := ifelse(AgeAtAdministration >= 80, 85, AgeAtAdministration)]

cut(flu$age, breaks = seq(0, 85, 5)) |> unique()
length(pops$`Five-Year Age Group` |> unique())

flu <- flu[, age_band := cut(age, breaks = seq(0, 85, 5), labels = labels,  right = TRUE)][]

## count vaccinations by age, gender and region
flu_freq <- flu[, .N, by = .(Gender, region, age_band)][order(region, age_band, Gender)][, age_band := as.character(age_band)]

flu_freq[]

```

```{r}
#| label: recode age bands to match population age bands and gender names

## first remove NAs

flu_freq <- flu_freq[!(is.na(age_band)),]
flu_freq <- flu_freq[, Gender := recode(Gender, "M" = "Male", "F" = "Female")][]

## check age bands match

identical(flu_freq$age_band |> unique(), pops$`Five-Year Age Group` |> unique())

```

```{r}
#| label: calculate age-standardised hospitalisation rates - link population data

## join population and aggregated flu data

## first exclude nationality and single age columns from the pop data

pops[, `:=` (`Single Age Group` = NULL, Nationality = NULL)][]

## then calculate 5-year pops by age band, gender and region

pops_agg <- pops[, sum_pop := sum(Population), by = .(Region, `Five-Year Age Group`, Gender)] |>
    select(Region, Gender, `Five-Year Age Group`, sum_pop) 

pops_agg$`Five-Year Age Group` |> unique()

## Now join aggregate population data to aggregated flu data and replace structural zeros (missing region-age-gender combinations) by 0

flu_agg <- complete(flu_freq, Gender, region, age_band) |>
    inner_join(pops_agg, by = c("Gender", "region" = "Region",  "age_band" = "Five-Year Age Group")) |>
    distinct() |>
    mutate(N = ifelse(is.na(N), 0, N)) |>
    setDT()

```

## Check

```{r}
#| label: check aggregations have worked


which(is.na(flu_agg[, .(N, sum_pop),  by = .(age_band, Gender, region)])) ## no NAs

summary(flu_agg)

```



## Calculate rates

```{r}
#| label: calculate A-S rates per 100,000

flu_agg[, rate := 100000 * N/sum_pop][]

## works!
```

## Compare regions

Using KSA population as standard rate

To do this will use the `phe_dsr` function from the `PHEindicatormethods` package from CRAN (see DSR vignette)


```{r}
#| label: generate reference population

## first load PHEindicatormethods and epitools

needs(PHEindicatormethods, epitools)

## calculate gender, age-specific populations for KSA
## 

ksa_pop <- pops[, ref_pop := sum(Population), by = .(Gender, `Five-Year Age Group`)][, .(`Five-Year Age Group`, Gender, ref_pop)] |>
    distinct() |>
    rename(age_band = `Five-Year Age Group`)

ksa_pop_f <- filter(ksa_pop, Gender == "Female") |> select(-Gender)

## 
```

## Calculate coverage


```{r}
#| label: crude rates

flu_rate <- setDT(flu_agg)[, `:=` (tot_obs = sum(N, na.rm = TRUE), tot_pop = sum(sum_pop, na.rm = TRUE)), by = .(region, Gender)][,.(region, Gender, tot_obs, tot_pop)] |>
    distinct()

flu_coverage <- phe_proportion(flu_rate, x = tot_obs, n = tot_pop)

```

## Visualise

```{r}

flu_coverage |>
    ggplot() +
    geom_col(aes(region, value, fill = Gender), position = position_dodge(width = 1)) +
    geom_linerange(aes(region, ymin = lowercl, ymax = uppercl, group = Gender), position = position_dodge(width = 1)) +
    labs(title = "Flu vaccination coverage", 
         y = "Coverage (%)", 
         x = "") +
    ggthemes::theme_base() +
    theme(plot.title.position = "plot", 
          axis.text.x = element_text(angle = 45, hjust = 1, )) +
    scale_y_continuous(label = scales::percent) +
    scale_fill_discrete(type = c("red", "blue"))
        

```



## Age-standarised coverage

Note 

```{r}
#| label: calculate asr

flu_agg_std <- flu_agg |>
    left_join(ksa_pop, by = c("age_band", "Gender"))

## which region - gender combinations have data for 17 age bands?
## 
## 

ksa_pop_f

gp <- flu_agg_std |>
    mutate(age_band = fct_relevel(as.factor(age_band), "5-9", after = 1)) |>
    arrange(age_band)

gp_nest <- gp |>
    nest_by(region, Gender)
    
flu_dsrs <- gp_nest |>
    mutate(ds_rates = list(epitools::ageadjust.direct(count = data$N, pop = data$sum_pop, stdpop = data$ref_pop))) |>
    unnest_wider(ds_rates) |>
    select(-data) 


flu_dsrs |>
    ggplot() +
    geom_col(aes(region, adj.rate, fill = Gender), position = position_dodge(width = 1)) +
    geom_linerange(aes(region, ymin = lci, ymax = uci, group = Gender), position = position_dodge(width = 1)) +
    labs(title = "Standardised flu vaccination coverage", 
         y = "Coverage (%)", 
         x = "") +
    theme(plot.title.position = "plot", 
          axis.text.x = element_text(angle = 45, hjust = 1), 
          panel.background = element_blank()) +
    scale_fill_discrete(type = c("red", "blue")) +
    scale_y_continuous(label = scales::percent)


```

