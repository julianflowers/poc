---
title: "AMR walkthrough"
author: "Julian Flowers"
date: "`r Sys.Date()`"
format: 
    html:
       toc: true
       toc-location: right
       code-fold: true
       code-tools: true
       fig-height: 10
       fig-width: 8
editor: visual
execute: 
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false
#| message: false
#| warning: false

needs(tidyverse, data.table, googledrive, readxl, skimr, janitor, gt, gtsummary, collapsibleTree, PHEindicatormethods, ggthemes, webshot2)

dir <- here::here("~/spha/data/fwdatastrategypocpublichealthframeworkindicators")

amr <- read_xlsx(paste0(dir, "/AMR 2022 POC.xlsx")) |> janitor::clean_names() |> setDT()

theme_set(ggthemes::theme_economist())


```

## Introduction

This document outlines a stepwise approach to calculating AMR indicators from dummy data kindly supplied by PHA.

There are x steps

1.  EDA (exploratory data analysis of raw data) - this involves cleaning, visualisation and creation of relevant variables.

2.  Review of indicator definitions

    -   Numerator

    -   Denominator

3.  Method for calculating numerator and denominator values from dataset. The outline uses R code for reproducibility and flexibility.

4.  Calculating indicator values and uncertainty intervals

5.  Suggested indicator visualisations (if appropriate).

## AMR indicators

### MRSA

> Percentage of bloodstream infection due to methicillin-resistant Staphylococcus aureus (MRSA)

> Numerator: No. of patients with growth of methicillin-resistant S. aureus in tested blood samples

> Denominator: Total No. of patients with growth of S. aureus in tested blood samples

### E. coli

> Percentage of bloodstream infection due to 3rd-generation cephalosporin resistant E. coli

> Numerator: No. of patients with growth of 3rd-generation cephalosporin resistant E. coli in tested blood samples

> Denominator: Total No. of patients with growth of E. coli in tested blood samples

### Import data

```{r}

df <- amr

```

`r dim(amr)[1]` observations

## Data preparation

### calculate 5-year age bands

```{r}

amr <- amr[, `:=` (age_band = cut(age_year, breaks = seq(0, 100, 5), right = FALSE))][]

head(amr)

```

### remove non-relevant data

This step removes identifiers (names, record IDs)

```{r}

amr <- amr |> select(-c(family_name, first_name, sample_no, patient_mrn, second_name, national_iqama_id, nationality))

```

### create per test file (long data)

-   this create a *per test* dataset rather than a per patient sample dataset

```{r}

amr_long <- amr |>
    pivot_longer(names_to = "antibiotic", values_to = "resistance", cols = minocycline:spectinomycin) |> setDT()
    
```

### Recode 3rd generation cephalosporins

-   this step adds a new variable which labels 3rd generation cephalosporins

```{r}
#| label: recode

amr_long <- amr_long[, gen_3 := case_when(str_detect(antibiotic, "cef") ~ "3rd-gen", TRUE ~ "other")][]

```

## Data summarisation and description (EDA)

-   first generate a high level tabular summary

```{r}
#| label: high level summary
#| eval: false

gtsummary::tbl_summary(amr)

```

-   represent this visually - we'll use decomposition trees

```{r}
#| label: fig-decomposition-trees
#| fig-cap: "Decomposition tree for E. coli"
#| fig-height: 12
#| eval: true

amr_freq <- amr_long[pathogen_name == "Escherichia coli", .N, by = .(age_band, gen_3, resistance, pathogen_name, community_origin)]

collapsibleTreeSummary(amr_freq, 
                       c( "community_origin", "gen_3","resistance"), 
                       root = "E. coli", 
                       nodeSize = "N", 
                       attribute = "N", 
                       fontSize = 16, 
                       collapsed = FALSE)

```

## Numerators and denominators

To calculate indicators we need to calculate

-   patients with blood stream infection
-   samples with antibiotic resistance

```{r}

amr_long


```

## Calculate resistance rates

-   calculate proportion of tests resistant
-   calculate confidence interval (using Wilson's score method for proportions via the `PHEindicatormethods` R package)

```{r}
#| label: tbl-E.coli
#| tbl-cap: "E. coli resistance rates to 3rd generation cephalosporins"

amr_long[pathogen_name == "Escherichia coli" & !is.na(resistance), .N, by = .(resistance, gen_3)] |>
    pivot_wider(names_from = resistance, values_from = N) |>
    rowwise() |>
    mutate(total_tests = sum(c_across(R:I), na.rm = TRUE), 
           resistance_rate = R / total_tests) |>
    flextable::flextable()

```

### by antibiotic

```{r}

options(digits = 2)

amr_res_ci_sa <- amr_long[pathogen_name == "Staphylococcus aureus" & !is.na(resistance), .N, by = .(antibiotic, resistance)] |>
    pivot_wider(names_from = resistance, values_from = N, values_fill = 0) |>
    rowwise() |>
    mutate(total_tests = sum(c_across(S:I), na.rm = TRUE), 
           resistance_rate = R / total_tests)

phe_proportion(amr_res_ci_sa, R, total_tests) |>
    bind_cols(amr_res_ci_sa) |>
    ggplot() +
    geom_point(aes(reorder(antibiotic, value), value)) +
    geom_linerange(aes(antibiotic, ymin = lowercl, ymax = uppercl)) +
    coord_flip() +
    labs(y = "Staph. aureus resistance rate", x = "") + 
    scale_y_continuous(position = "right")

```

### by age

```{r}
#| label: by age


amr_res_ci_age <- amr_long[pathogen_name == "Staphylococcus aureus" & !is.na(resistance), .N, by = .(age_band, resistance)] |>
    pivot_wider(names_from = resistance, values_from = N, values_fill = 0) |>
    rowwise() |>
    mutate(total_tests = sum(c_across(S:I), na.rm = TRUE), 
           resistance_rate = R / total_tests)

phe_proportion(amr_res_ci_age, R, total_tests) |>
    bind_cols(amr_res_ci_age) |>
    ggplot() +
    geom_point(aes(reorder(age_band, value), value)) +
    geom_linerange(aes(age_band, ymin = lowercl, ymax = uppercl)) +
    coord_flip() +
    labs(y = "Staph. aureus resistance rate", x = "") + 
    scale_y_continuous(position = "right")


```

## E. coli

```{r}
#| label: e coli

amr_res_ci_ec <- amr_long[str_detect(pathogen_name, "coli") & !is.na(resistance), .N, by = .(antibiotic, resistance, gen_3)] |>
    pivot_wider(names_from = resistance, values_from = N, values_fill = 0) |>
    rowwise() |>
    mutate(total_tests = sum(c_across(R:I), na.rm = TRUE), 
           resistance_rate = R / total_tests)

phe_proportion(amr_res_ci_ec, R, total_tests) |>
    bind_cols(amr_res_ci_ec) |>
    ggplot() +
    geom_point(aes(reorder(antibiotic, value), value, colour = gen_3)) +
    geom_linerange(aes(antibiotic, ymin = lowercl, ymax = uppercl)) +
    coord_flip() +
    labs(y = "E. coli resistance rate", x = "") + scale_y_continuous(position = "right")



```
